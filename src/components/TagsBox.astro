---
import { getBlogsAndRepos } from "@utils/collections";

const allPosts = (await getBlogsAndRepos()).allCollections;
const postYears = new Map();

allPosts.forEach((post) => {
  const year = new Date(post.data.date).getFullYear();

  if (!postYears.get(year)) {
    postYears.set(year, []);
  }

  postYears.get(year).push(post);
});

type Props = {
  tags: string[];
};

const { tags } = Astro.props;
const currentPath = new URL(Astro.request.url).pathname;

console.log("currentPath", currentPath);

const pathParts = currentPath.split("/").filter((part) => part !== "");

console.log("pathParts", pathParts);

let currentTag: string | null = null;
let currentYear: string | null = null;

const tagsIndex = pathParts.indexOf("tags");
if (tagsIndex !== -1 && tagsIndex + 1 < pathParts.length) {
  currentTag = pathParts[tagsIndex + 1];
}

const archiveIndex = pathParts.indexOf("archive");
if (archiveIndex !== -1 && archiveIndex + 1 < pathParts.length) {
  currentYear = pathParts[archiveIndex + 1];
}

console.log("tagsIndex", tagsIndex);
console.log("archiveIndex", archiveIndex);
console.log("currentTag", currentTag);
console.log("currentYear", currentYear);
---

<div class="flex flex-wrap">
  <!-- Tags Dropdown -->
  <div class="select-wrapper mr-3">
    <select
      class="customSelectbox border shadow-sm bg-gray-700 rounded-md border-gray-300 text-gray-300"
      onchange="location.href=`/blog/tags/${this.value}`"
    >
      <option selected disabled>tags...</option>
      {
        tags.map((tag) => (
          <option value={tag} selected={tag === currentTag}>
            {tag}
          </option>
        ))
      }
    </select>
  </div>

  <!-- Archive Dropdown -->
  <div class="select-wrapper">
    <select
      class="customSelectbox border shadow-sm bg-gray-700 rounded-md border-gray-300 text-gray-300"
      onchange="location.href=`/blog/archive/${this.value}`"
    >
      <option selected disabled>archives...</option>
      {
        [...postYears.entries()].map(([archiveYear, archivePosts]) => (
          <option
            value={archiveYear}
            selected={archiveYear.toString() === currentYear}
          >
            {archiveYear} ({archivePosts.length})
          </option>
        ))
      }
    </select>
  </div>
</div>

<script is:inline>
  document.addEventListener("DOMContentLoaded", function () {
    document.querySelectorAll(".dropdown-el").forEach(function (el) {
      el.addEventListener("click", function (e) {
        e.preventDefault();
        e.stopPropagation();
        this.classList.toggle("expanded");
        document.getElementById(e.target.getAttribute("for")).checked = true;
      });
    });

    document.addEventListener("click", function () {
      document.querySelectorAll(".dropdown-el").forEach(function (el) {
        el.classList.remove("expanded");
      });
    });
  });
</script>

<style is:global>
  .select-wrapper {
    display: inline-block;
    position: relative;
  }
  .select-wrapper::after {
    content: "Â»";
    position: absolute;
    width: 20px;
    height: 20px;
    top: 14px;
    right: 5px;
    font-size: 24px;
    line-height: 20px;
    pointer-events: none;
    z-index: 0;
    transform: rotate(90deg);
    color: #333333;
  }
  .select-wrapper select {
    position: relative;
    background-color: transparent;
    color: #333333;
    padding: 10px 35px 10px 5px;
    line-height: 20px;
    font-size: 17px;
    outline: none;
    appearance: none;
    -webkit-appearance: none;
    text-align-last: center;
  }
</style>
