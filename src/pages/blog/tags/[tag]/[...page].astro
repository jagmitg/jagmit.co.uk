---
import BlogCardItem from "@components/BlogCardItem.astro";
import Layout from "@layouts/Layout.astro";
import MainLayout from "@layouts/MainLayout.astro";

import { getBlogsAndRepos, parseTags, getAllTags } from "@utils/collections";
import type { BlogOrRepoEntry } from "@utils/collections";
import type { GetStaticPathsOptions, Page } from "astro";
import { BLOG_DESCRIPTION, PAGINATE_CONTENT } from "@const";

export async function getStaticPaths({ paginate }: GetStaticPathsOptions) {
  const { allCollections } = await getBlogsAndRepos();
  const tags = getAllTags(allCollections);
  return tags.map((tag) =>
    paginate(
      allCollections.filter((post: any) =>
        parseTags(post.data.tags).some(
          (current) => current.toLowerCase() == tag,
        ),
      ),
      {
        params: { tag },
        pageSize: PAGINATE_CONTENT,
      },
    ),
  );
}

const { allCollections } = await getBlogsAndRepos();
const allTags = getAllTags(allCollections);
const { tag } = Astro.params;
const { page } = Astro.props as {
  page: Page<BlogOrRepoEntry>;
};
---

<Layout description={BLOG_DESCRIPTION}>
  <MainLayout
    title={tag}
    tags={allTags}
    breadcrumb={true}
    pagination={{ prev: page.url.prev, next: page.url.next }}
  >
    <div class="gap-4 flex flex-col">
      {
        page.data.map(({ data, slug }) => {
          if ("repo" in data) {
            return (
              <BlogCardItem
                url={data.repo ? data.repo : `/blog/${slug}`}
                frontmatter={data}
                repo={!!data.repo}
              />
            );
          } else {
            return (
              <BlogCardItem
                url={`/blog/${slug}`}
                frontmatter={data}
                repo={false}
              />
            );
          }
        })
      }
    </div>
  </MainLayout>
</Layout>
