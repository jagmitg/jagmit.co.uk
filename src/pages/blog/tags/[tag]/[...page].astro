---
import BlogCardItem from "@components/BlogCardItem.astro";
import TagsBox from "@components/TagsBox.astro";
import Layout from "@layouts/Layout.astro";
import MainLayout from "@layouts/MainLayout.astro";
import Breadcrumb from "@components/icons/Breadcrumb.astro";

import {
  getBlogsAndRepos,
  BlogOrRepoEntry,
  parseTags,
  getAllTags,
} from "@utils/collections";
import BlogDescription from "@components/BlogDescription.astro";
import type { GetStaticPathsOptions, Page } from "astro";
import Pagination from "@components/Pagination.astro";
import { BLOG_DESCRIPTION, PAGINATE_CONTENT } from "@const";

export async function getStaticPaths({ paginate }: GetStaticPathsOptions) {
  const { allCollections } = await getBlogsAndRepos();
  const tags = getAllTags(allCollections);
  return tags.map((tag) =>
    paginate(
      allCollections.filter((post) =>
        parseTags(post.data.tags).some(
          (current) => current.toLowerCase() == tag
        )
      ),
      {
        params: { tag },
        pageSize: PAGINATE_CONTENT,
      }
    )
  );
}

const { allCollections } = await getBlogsAndRepos();
const allTags = getAllTags(allCollections);
const { tag } = Astro.params;
const { page } = Astro.props as {
  page: Page<BlogOrRepoEntry>;
};
---

<Layout description={BLOG_DESCRIPTION}>
  <MainLayout>
    <BlogDescription slot="description" />
    <div
      class="flex flex-col sm:flex-row justify-between sm:justify-between items-center pb-6"
    >
      <h2
        class="text-2xl text-center sm:text-left mb-4 sm:mb-0 flex items-center"
      >
        <a href="/blog" class="mr-2">Blog</a>
        <Breadcrumb />
        <span>{tag}</span>
      </h2>
      <TagsBox tags={allTags} slot="optional-content" />
    </div>

    <div class="gap-4 flex flex-col">
      {
        page.data.map(({ data, slug }) => {
          if ("repo" in data) {
            return (
              <BlogCardItem
                url={data.repo ? data.repo : `/blog/${slug}`}
                frontmatter={data}
                repo={!!data.repo}
              />
            );
          } else {
            // Handle the case where data does not have a 'repo' property, if needed.
            return (
              <BlogCardItem
                url={`/blog/${slug}`}
                frontmatter={data}
                repo={false}
              />
            );
          }
        })
      }
    </div>
    <Pagination prev={page.url.prev} next={page.url.next} />
  </MainLayout>
</Layout>
