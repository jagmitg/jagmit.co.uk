---
import type { GetStaticPathsOptions } from "astro";
import Pagination from "@components/Pagination.astro";
import { BLOG_DESCRIPTION } from "../../constants";
import Layout from "@layouts/Layout.astro";
import MainLayout from "@layouts/MainLayout.astro";
import BlogCardItem from "@components/BlogCardItem.astro";
import TagsBox from "@components/TagsBox.astro";
import { getBlogsAndRepos, getAllTags } from "@utils/collections";

export async function getStaticPaths({ paginate }: GetStaticPathsOptions) {
  const allPosts = await Astro.glob("../../content/**/*.{md,mdx}");

  const slugify = (filePath: string) => {
    let fileName = filePath.split("/").pop();
    fileName = fileName?.split(".").shift() || "";
    return fileName
      .toLowerCase()
      .replace(/[^a-z0-9 -]/g, "")
      .replace(/\s+/g, "-");
  };

  const formattedPosts = allPosts
    .map((post: any) => {
      return {
        ...post,
        slug: slugify(post.url),
        year: new Date(post.frontmatter.date).getFullYear(),
      };
    })
    .filter((post: any) => post.frontmatter.isDraft !== true)
    .sort(
      (a: any, b: any) =>
        new Date(b.frontmatter.date).getTime() -
        new Date(a.frontmatter.date).getTime()
    );

  return paginate(formattedPosts, {
    pageSize: 8,
  });
}

const { allCollections } = await getBlogsAndRepos();
const allTags = getAllTags(allCollections);

const { page } = Astro.props;
---

<Layout description={BLOG_DESCRIPTION}>
  <MainLayout>
    <div
      class="flex flex-col sm:flex-row justify-between sm:justify-between items-center pb-6"
    >
      <h2 class="text-2xl text-center sm:text-left mb-4 sm:mb-0">
        Read my blog...
      </h2>
      <TagsBox tags={allTags} slot="optional-content" />
    </div>

    {
      (
        Object.entries(
          page.data.reduce((acc: any, curr: any) => {
            if (!acc[curr.year]) {
              acc[curr.year] = [];
            }
            acc[curr.year].push(curr);
            return acc;
          }, {})
        ) as [string, any[]][]
      )
        .sort(([yearA], [yearB]) => Number(yearB) - Number(yearA))
        .map(([year, posts]) => (
          <>
            <h3 class="text-xl mb-4 border-b pb-4">{year}</h3>
            {posts.map((post: any) => (
              <BlogCardItem
                url={
                  post.frontmatter.repo
                    ? post.frontmatter.repo
                    : `/blog/${post.slug}`
                }
                frontmatter={post.frontmatter}
                repo={post.frontmatter.repo ? true : false}
              />
            ))}
          </>
        ))
    }

    <Pagination prev={page.url.prev} next={page.url.next} />
  </MainLayout>
</Layout>
