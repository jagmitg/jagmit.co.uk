---
// Astro Component Imports and Setup
import type { GetStaticPathsOptions } from "astro";
import { getSortedPosts } from "@utils/collections";
import Layout from "@layouts/Layout.astro";
import MainLayout from "@layouts/MainLayout.astro";
import BlogCardItem from "@components/BlogCardItem.astro";
import { BLOG_DESCRIPTION, PAGINATE_CONTENT } from "@const";

interface BlogPost {
  slug: string;
  data: {
    date?: string;
    repo?: string;
  };
}

interface YearMonthAccumulator {
  [key: string]: BlogPost[];
}

export async function getStaticPaths({ paginate }: GetStaticPathsOptions) {
  let allBlogPosts = await getSortedPosts();

  // Normalize slugs to ensure no folder names are included
  allBlogPosts = allBlogPosts.map(post => ({
    ...post,
    slug: post.slug.replace(/^(content|repo)\//, '')
  }));

  return paginate(allBlogPosts, {
    pageSize: PAGINATE_CONTENT,
  });
}

const { page } = Astro.props;
const monthNames = [
  "January",
  "February",
  "March",
  "April",
  "May",
  "June",
  "July",
  "August",
  "September",
  "October",
  "November",
  "December",
];

function organizePostsByMonth(posts: BlogPost[]): YearMonthAccumulator {
  return posts.reduce((acc: YearMonthAccumulator, post: BlogPost) => {
    if (!post.data || !post.data.date) return acc;
    const date = new Date(post.data.date);
    const year = date.getFullYear();
    const monthIndex = date.getMonth();
    const yearMonthKey = `${year}-${monthIndex + 1}`;
    acc[yearMonthKey] = acc[yearMonthKey] || [];
    acc[yearMonthKey].push(post);
    return acc;
  }, {});
}

function sortedMonthKeys(monthData: YearMonthAccumulator): string[] {
  return Object.keys(monthData).sort((a, b) => b.localeCompare(a));
}
---

<Layout title="Read my Blog" description={BLOG_DESCRIPTION}>
  <MainLayout
    title="Read my blog..."
    pagination={{ prev: page.url.prev, next: page.url.next }}
    dropdowns={true}
  >
    {
      sortedMonthKeys(organizePostsByMonth(page.data)).map(yearMonth => {
        const [year, monthIndex] = yearMonth.split("-");
        const monthName = monthNames[parseInt(monthIndex, 10) - 1];
        return (
          <>
            <h3 class="text-xl mb-4 border-b pb-4">{`${monthName} ${year}`}</h3>
            {organizePostsByMonth(page.data)[yearMonth].map(post => (
              <BlogCardItem
                key={post.slug}
                url={post.data.repo ? post.data.repo : `/blog/${post.slug}/`}
                frontmatter={post.data}
                repo={!!post.data.repo}
              />
            ))}
          </>
        );
      })
    }
  </MainLayout>
</Layout>
