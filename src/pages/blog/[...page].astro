---
import type { GetStaticPathsOptions } from "astro";
import Layout from "@layouts/Layout.astro";
import MainLayout from "@layouts/MainLayout.astro";
import BlogCardItem from "@components/BlogCardItem.astro";
import { getBlogsAndRepos, getAllTags } from "@utils/collections";
import { BLOG_DESCRIPTION, PAGINATE_CONTENT } from "@const";

export async function getStaticPaths({ paginate }: GetStaticPathsOptions) {
  const allPosts = await Astro.glob("../../content/{blog,repo}/*.{md,mdx}");
  const monthNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];

  const slugify = (filePath: string) => {
    // Simplify slugify logic, if filePath ends with "/", remove it directly
    filePath = filePath.endsWith("/") ? filePath.slice(0, -1) : filePath;
    let fileName = filePath.split("/").pop()?.split(".").shift() || "";
    return fileName.toLowerCase().replace(/[^a-z0-9 -]/g, "").replace(/\s+/g, "-");
  };

  const formattedPosts = allPosts
    .map((post) => ({
      ...post,
      slug: slugify(post.url),
      year: new Date(post.frontmatter.date).getFullYear(),
      month: monthNames[new Date(post.frontmatter.date).getMonth()],
      sortKey: `${new Date(post.frontmatter.date).getFullYear()}-${new Date(post.frontmatter.date).getMonth() + 1}`
    }))
    .filter((post) => !post.frontmatter.isDraft)
    .sort((a, b) => a.sortKey.localeCompare(b.sortKey));

  return paginate(formattedPosts, {
    pageSize: PAGINATE_CONTENT,
  });
}

const { allCollections } = await getBlogsAndRepos();
const allTags = getAllTags(allCollections);

const { page } = Astro.props;
---

<Layout title="Read my Blog" description={BLOG_DESCRIPTION}>
  <MainLayout
    title="Read my blog..."
    tags={allTags}
    pagination={{ prev: page.url.prev, next: page.url.next }}
  >
    {
      Object.entries(
        page.data.reduce((acc, curr) => {
          const yearMonthKey = `${curr.month.toString().padStart(2, '0')}-${curr.year}-`;
          if (!acc[yearMonthKey]) {
            acc[yearMonthKey] = [];
          }
          acc[yearMonthKey].push(curr);
          return acc;
        }, {})
      )
      .sort(([keyA], [keyB]) => keyB.localeCompare(keyA))
      .map(([yearMonth, posts]) => {
        const [year, month] = yearMonth.split("-");
        return (
          <>
            <h3 class="text-xl mb-4 border-b pb-4">{`${year} ${month}`}</h3>
            {posts.map((post) => (
              <BlogCardItem
                url={post.frontmatter.repo ? post.frontmatter.repo : `/blog/${post.slug}/`}
                frontmatter={post.frontmatter}
                repo={!!post.frontmatter.repo}
              />
            ))}
          </>
        );
      })
    }
  </MainLayout>
</Layout>
