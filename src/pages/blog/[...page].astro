---
import type { GetStaticPathsOptions } from "astro";
import { getSortedPosts } from "@utils/collections";
import Layout from "@layouts/Layout.astro";
import MainLayout from "@layouts/MainLayout.astro";
import BlogCardItem from "@components/BlogCardItem.astro";
import { BLOG_DESCRIPTION, PAGINATE_CONTENT } from "@const";
import type { CollectionEntry } from "astro:content";

interface EnhancedBlogPost extends Omit<CollectionEntry<'blog'>, 'slug'> {
  slug: string;
}

interface YearMonthAccumulator {
  [key: string]: EnhancedBlogPost[];
}

export async function getStaticPaths({ paginate }: GetStaticPathsOptions) {
  let enhancedBlogPosts: EnhancedBlogPost[] = await getSortedPosts() as unknown as EnhancedBlogPost[];

  if (!enhancedBlogPosts.length) {
    console.log("No enhanced posts available for pagination");
  }

  return paginate(enhancedBlogPosts, {
    pageSize: PAGINATE_CONTENT,
  });
}

const { page } = Astro.props as {
  page: {
    data: EnhancedBlogPost[],
    url: {
      prev: string,
      next: string
    }
  };
};
const monthNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];

function organizePostsByMonth(posts: EnhancedBlogPost[]): YearMonthAccumulator {
  return posts.reduce((acc: YearMonthAccumulator, post: EnhancedBlogPost) => {
    if (!post || !post.data || !post.data.date) {
      console.log("Skipping post due to incomplete data:", post);
      return acc;
    }

    const date = new Date(post.data.date);
    const year = date.getFullYear();
    const monthIndex = date.getMonth();
    const yearMonthKey = `${year}-${monthIndex + 1}`;
    acc[yearMonthKey] = acc[yearMonthKey] || [];
    acc[yearMonthKey].push(post);
    return acc;
  }, {});
}

function sortedMonthKeys(monthData: YearMonthAccumulator): string[] {
  return Object.keys(monthData).sort((a, b) => b.localeCompare(a));
}
---

<Layout title="Read my Blog" description={BLOG_DESCRIPTION}>
  <MainLayout title="Read my blog..." pagination={{ prev: page.url.prev, next: page.url.next }} dropdowns={true}>
    {sortedMonthKeys(organizePostsByMonth(page.data)).map(yearMonth => {
      const [year, monthIndex] = yearMonth.split("-");
      const monthName = monthNames[parseInt(monthIndex, 10) - 1];
      return (
        <>
          <h3 class="text-xl mb-4 border-b pb-4">{`${monthName} ${year}`}</h3>
          {organizePostsByMonth(page.data)[yearMonth].map(post => (
            <BlogCardItem
              key={post.slug}
              url={post.data.repo ? post.data.repo : `/blog/${post.slug}/`}
              frontmatter={post.data}
              repo={!!post.data.repo}
            />
          ))}
        </>
      );
    })}
  </MainLayout>
</Layout>
