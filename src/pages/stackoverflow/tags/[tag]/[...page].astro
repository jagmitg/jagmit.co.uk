---
import Layout from "@layouts/Layout.astro";
import StackoverflowLayout from "@layouts/StackoverflowLayout.astro";
import { generateUniqueTags, matchesTagDefinition } from "@utils/collections";
import { PAGINATE_CONTENT, TAGS_DEFINITION } from "@const";
import stackOverflowData from "../../../../data/stackoverflow.json";

export async function getStaticPaths(): Promise<any> {
  const questions: any[] = Object.values(stackOverflowData.data);
  const tags = generateUniqueTags(questions);

  let allPaths: any[] = [];
  let questionIndex = 1;

  for (const tag of tags) {
    const filteredQuestions = questions.filter(
      (post: any) =>
        post.tags &&
        post.tags.some((current: any) =>
          matchesTagDefinition(current, TAGS_DEFINITION[tag] || []),
        ),
    );

    filteredQuestions.sort((a: any, b: any) => b.creation_date - a.creation_date);

    filteredQuestions.forEach((post: any) => {
      post.key = questionIndex;
      questionIndex++;
    });

    const numberOfPages = Math.ceil(filteredQuestions.length / PAGINATE_CONTENT);

    for (let i = 1; i <= numberOfPages; i++) {
      allPaths.push({
        params: { tag, page: i },
        props: {
          questions: filteredQuestions.slice(
            (i - 1) * PAGINATE_CONTENT,
            i * PAGINATE_CONTENT
          ),
          page: {
            lastPage: numberOfPages,
            currentPage: i,
            url: {
              prev: i === 1 ? null : `/stackoverflow/tags/${tag}/${i - 1}/`,
              next: i === numberOfPages ? null : `/stackoverflow/tags/${tag}/${i + 1}/`,
            },
          },
        },
      });
    }
  }

  return allPaths;
}

// Extract data from Astro props
const { questions, page }: any = Astro.props;
const { tag } = Astro.params;
---

<Layout
  title={page.lastPage > 1
    ? `${tag} - My Stackoverflow Tag - Page ${page.currentPage}`
    : `${tag} - My Stackoverflow Tag`}
>
  <StackoverflowLayout
    title={`Tag: ${tag}`}
    pagination={page.url}
  >
    <div class="grid gap-4 grid-cols-1 grid-rows-2 mt-5 lg:grid-cols-2">
      {questions.map((question: any) => (
        <a
          href={question.link}
          target="_blank"
          rel="noopener noreferrer"
          class="p-4 border mb-2 relative border-neutral-200 bg-neutral-50 rounded flex items-center justify-between px-3 py-4 w-full hover:bg-neutral-200 transition-colors"
        >
          <div class="flex flex-col">
            <p class="font-bold text-neutral-900">{question.title}</p>
            <p class="text-neutral-600">Tags: {question.tags.join(", ")}</p>
          </div>
        </a>
      ))}
    </div>
  </StackoverflowLayout>
</Layout>
